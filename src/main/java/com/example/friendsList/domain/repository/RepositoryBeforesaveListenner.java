/*
package com.example.friendsList.domain.repository;

import org.springframework.context.ApplicationListener;
import org.springframework.data.relational.core.mapping.event.BeforeSaveEvent;

public class RepositoryBeforeSaveListener implements ApplicationListener<BeforeSaveEvent> {

    //private final Snowflake snowflake;

    @Override
    public void onApplicationEvent(BeforeSaveEvent event) {
        Object entity = event.getEntity();
        boolean isNew = false;

        //処理するデータが自動生成のIdが必要だったら
        if(entity instanceof AutoGeneratedIdManageable) {
            //ObjectからAutoGeneratedIdManageable型へキャスト
            AutoGeneratedIdManageable aEntity = (AutoGeneratedIdManageable) entity;

            //getAutoGeneratedIdがnull(まだ設定されていない)だったらTrue
            isNew = aEntity.getAutoGeneratedId() == null;

            //新しい登録だったら
            if(isNew) {
                //snowflakeのアルゴリズムで自動生成したIdを設定(snowflakeの中身は不明)
                aEntity.setAutoGeneratedId(snowflake.nextIdAsString());
            }
        }

        if(entity instanceof BaseEntity) {
            BaseEntity baseEntity = (BaseEntity) entity;

            //新しく登録するデータだったら、Update文からInsert文へ
            if(isNew) {
                //BaseEntityに足りないデータを取得
                BusinessObjectUtil.updateFieldToInsert(baseEntity);
            }else {
                //更新日時とかを新しくする
                BusinessObjectUtil.updateFieldToUpdate(baseEntity);
            }
        }

        //以上の処理が終わったら、DomainService内のメソッドで保存する

    }
}
*/